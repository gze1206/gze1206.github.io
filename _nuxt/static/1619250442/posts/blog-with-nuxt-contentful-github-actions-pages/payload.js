__NUXT_JSONP__("/posts/blog-with-nuxt-contentful-github-actions-pages", (function(a,b){return {data:[{entry:{metadata:{tags:[]},sys:{space:{sys:{type:a,linkType:"Space",id:"iuy42bw007mk"}},id:"4BZkpfM4FQMrp9VoYMIiKM",type:"Entry",createdAt:b,updatedAt:b,environment:{sys:{id:"master",type:a,linkType:"Environment"}},revision:1,contentType:{sys:{type:a,linkType:"ContentType",id:"blogPost"}},locale:"en-US"},fields:{title:"블로그 제작 과정 (Nuxt+Contentful+Github Actions\u002FPages)",slug:"blog-with-nuxt-contentful-github-actions-pages",tags:["Vue.js","Nuxt","Contentful","Github","Dev","Web","Github Actions","Github Pages"],body:"# 서문\n  블로그를 만들게 된 계기는 너무나도 단순했다.\n그저 친구와 대화를 나누던 중 블로그에 관한 내용이 나왔고, 별 이유 없이 만들어 볼까 하는 막연한 생각이 들어 시작하게 되었다.\n귀찮아서 미루고 미루다보니 작업이 너무나도 더뎠으나, 그래도 나름 공개를 할 수 있을 외형은 갖추었다고 생각되어 본 블로그의 제작 과정을 간략하게나마 공유하고자 한다.\n\n# Github Pages\n  처음으로 정한 것은 Github Pages 기능을 이용하는 것이었다.\n서버 호스팅까지 해가면서 블로그를 굴리는 것은 좀 귀찮았고, 그렇게까지 할 이유가 없기도 했다.\n그렇기에 Github Pages를 이용하는 것은 무난해보이는 선택지였고, github.io라는 도메인 또한 제공을 받을 수 있기에 별 다른 고민없이 내린 결정이었다.\n\n  그렇게 정한 뒤 Github Pages를 이용해 블로그를 만든 사람들의 글 등을 찾아보니 jekyll 등을 이용한 것들이 대부분이었다.\n마크다운으로 포스트를 작성할 수 있다는 점은 마음에 들었지만, 마크다운 파일을 작성해 그 파일을 직접 커밋하는 방식이 그닥 마음에 들지 않아 조금 더 조사를 해보니 [Contentful](https:\u002F\u002Fwww.contentful.com\u002F)이라는 서비스를 찾을 수 있었다.\n컨텐츠의 대략적인 구조를 정해두고, 거기에 맞게 컨텐츠를 작성할 수 있는 웹 UI를 제공해주고, 해당 컨텐츠를 조회 및 관리할 수 있는 API를 제공하는 서비스였다.\n\n  마크다운 파일을 만들어 그걸 직접 커밋하는 것보단 이런 서비스에서 글을 작성하고, 그게 자동적으로 블로그에 반영되는 방식이 더 마음에 들었기에 해당 서비스를 이용해보기로 했다.\n\n# 준비\n  Contentful에 세팅한 블로그 포스팅에 대한 구조는 다음과 같다.\n![blog-1](\u002F\u002Fimages.ctfassets.net\u002Fiuy42bw007mk\u002F1W9mEtsrKa2eru6v9fVvKk\u002Fe7e5621293591364e0a04502853fbb8e\u002Fimage.png)\n\n\u003E 대표 이미지에 대한 내용을 추가할지에 대한 것을 고민 중이기 때문에 이후 변경될 가능성이 다분하지만, 당장의 구조는 이런 상태다.\n\n  다음으로 준비한 것은 Github 저장소였다.\n`[github 사용자 이름 (나의 경우엔 gze1206)].github.io`\n의 형식으로 이름을 지어주는 것 외에는 일반 저장소를 만드는 방식과 차이가 없었다.\n나는 master 브랜치에 프로젝트를 생성하고, 해당 프로젝트를 빌드한 결과물을 gh-pages 브랜치에 푸시한 뒤, Github Pages 기능을 이용해 해당 브랜치의 내용을 기반으로 정적 사이트 호스팅을 진행하는 식으로 방향을 잡았다.\n\n  프로젝트는 나에게 익숙한 [Nuxt](https:\u002F\u002Fnuxtjs.org\u002F)를 이용하기로 했다.\nNuxt는 Vue.js를 기반으로 한 프레임워크로, 다양한 기능을 모듈 등의 형식으로 간단하게 연결하여 사용할 수 있기 때문에 나는 웹을 필요로 하는 프로젝트 대부분에서 애용하고 있다.\n간단한 레이아웃을 구성하고, Contentful에서 제공하는 Node.js용 모듈을 이용해 블로그 포스팅을 불러오는 작업을 진행했다.\n[공식 문서](https:\u002F\u002Fwww.contentful.com\u002Fdevelopers\u002Fdocs\u002Freferences\u002Fcontent-delivery-api\u002F)를 참고하여 어렵지 않게 작업을 마칠 수 있었다.\n\n  해당 작업을 마치니 Contentful 쪽에서 작성한 마크다운 형식의 글을 받아올 수 있는 것을 확인했고, [Marked.js](https:\u002F\u002Fmarked.js.org\u002F)를 사용해 해당 마크다운을 HTML로 변환한 뒤 Vue의 v-html을 통해 렌더링하도록 페이지를 구성했다.\n다만, 코드 하이라이팅이 마음에 들지 않아 [highlight.js](https:\u002F\u002Fhighlightjs.org\u002F)를 사용해 조금 더 보기 좋게끔 바꾸었다.\n\n  Contentful에 포스트를 작성하고, 프로젝트 빌드를 통해 정적 사이트를 생성한 다음, Github Pages로 호스팅하는 것 뿐이라면 이런 방식으로도 충분하다.\n하지만 이래선 마크다운 파일을 직접 작성하는 것과 별반 다르지 않기 때문에, Github Actions을 사용하기로 했다.\n\n# Github Actions를 통한 자동화\n  내가 원하는 것은 Contentful에 포스트를 작성하면, 자동적으로 프로젝트를 빌드해 gh-pages 브랜치에 빌드 결과물을 올리는 것이다.\n이를 Github Actions를 통해 구현하기로 했다.\n해당 기능을 사용하면 특정 상황(커밋이 푸시되었을 때 등)에 지정한 동작을 자동으로 수행하도록 할 수 있다.\nyml 파일을 작성하기만 하면 세팅이 끝나기에 크게 어려울 것도 없었다.\n다음이 내가 현재 사용 중인 yml 파일의 전문이다.\n\n```yaml\nname: Deploy\n\non:\n  push:\n    branches: [\"master\"]\n  workflow_dispatch:\n\njobs:\n  Build:\n    runs-on: ubuntu-latest\n\n    steps:\n      - uses: actions\u002Fcheckout@v2\n\n      - name: Install Dependencies\n        run: npm install\n\n      - name: Create config json file\n        uses: jsdaniell\u002Fcreate-json@1.1.2\n        with:\n          name: \".contentful.json\"\n          json: ${{ secrets.CTF_JSON }}\n\n      - name: Build\n        run: npm run generate\n\n      - name: Cache dist\n        uses: actions\u002Fcache@v2\n        with:\n          path: dist\n          key: build-result-${{ github.run_number }}\n\n  Deploy:\n    needs: Build\n    runs-on: ubuntu-latest\n\n    steps:\n      - name: Cache dist\n        uses: actions\u002Fcache@v2\n        with:\n          path: dist\n          key: build-result-${{ github.run_number }}\n\n      - name: Deploy to Github Pages\n        uses: peaceiris\u002Factions-gh-pages@v3\n        with:\n          github_token: ${{ secrets.GITHUB_TOKEN }}\n          publish_dir: .\u002Fdist\n```\n\n  우선, on에 적힌 것들이 이 작업을 수행할 상황을 정의한 것이다.\npush는 커밋이 푸시되었을 때 수행하겠다는 것인데, 프로젝트 코드의 수정이 있을 때에도 자동적으로 빌드를 진행해 해당 변경사항을 반영하도록 하기 위함이다.\nworkflow_dispatch는 Github 페이지 내에서 수동 실행을 누르거나, 혹은 REST API 호출이 있었을 때 수행하는 옵션이다.\nContentful에서 포스트 작성 시 해당 REST API를 호출하게 한다면 자동적으로 빌드 및 배포를 진행할 수 있다.\n\n  jobs을 보면 크게 빌드와 배포로 나누었다.\n빌드 과정에선 Contentful API를 위한 설정 파일을 작성하고 빌드를 진행한다.\n\n\u003E API 키 등을 Github 저장소의 Secrets 항목에 저장해두었다. 이를 json 파일로 저장하는 과정을 거치게 된다.\n\n이후 빌드 과정을 문제없이 진행했다면 배포 과정을 거치게 되는데, 각 job 간에는 파일이 유지되지 않기 때문에 cache 기능을 통해 빌드 결과물을 공유하도록 했다. 이 때 cache 키는 build-result-(Actions 실행 번호)의 형식을 갖게 해두었다.\ngh-pages 브랜치에 이를 푸시하는 것도 [다른 유저가 만든 것](https:\u002F\u002Fgithub.com\u002Fpeaceiris\u002Factions-gh-pages)이 있기에 이를 사용했다.\n덕분에 간단하게 빌드부터 배포까지의 과정을 간단하게 작성할 수 있었다.\n\n  프로젝트를 푸시하거나 Github 저장소 페이지에 있는 Actions 탭에서 작업을 수동 실행해보면 정상적으로 동작하는 것을 확인할 수 있다.\n이제 남은 것은 Contentful에서 이 빌드와 배포를 자동으로 호출하도록 하는 것 뿐이다.\n\n# Contentful 웹훅 설정\nContentful에서 아래 메뉴를 통해 웹훅 설정을 진행할 수 있다.\n![blog-2](\u002F\u002Fimages.ctfassets.net\u002Fiuy42bw007mk\u002F1Gthh03QYJ6FqYtwMhYMoH\u002Fdc5d3886303105394e8cc685412a8cfd\u002Fimage.png)\n\n  Github Actions를 설정할 때 workflow_dispatch를 설정해두었기 때문에 POST를 통해 해당 작업을 호출할 수 있다.\n`https:\u002F\u002Fapi.github.com\u002Frepos\u002F(Github 사용자명)\u002F(Github 저장소명)\u002Factions\u002Fworkflows\u002F(해당 Github Actions의 yml 파일명).yml\u002Fdispatches`\n위 주소로 POST 명령을 보내면 된다.\n![blog-3](\u002F\u002Fimages.ctfassets.net\u002Fiuy42bw007mk\u002FUVAjyL0AxtUCujgN3bZcV\u002Fb3af253dee5d1291cb692b8185bd4754\u002Fimage.png)\n이런 식으로 웹훅 설정을 진행하면 되는데, 헤더의 Authorization에는 [Personal Access Token](https:\u002F\u002Fdocs.github.com\u002Fen\u002Fgithub\u002Fauthenticating-to-github\u002Fcreating-a-personal-access-token)을 입력해주어야 한다.\n해당 토큰을 생성하는 방법은 위 링크에 설명되어있다.\n  Payload에는 위 이미지에 있는 것처럼 어떤 브랜치를 대상으로 작업을 진행할 것인지를 명시해주면 된다. 나는 master 브랜치에서 빌드 및 배포를 진행할 것이므로 master로 적어주었다.\n\n  이제 Contentful에서 포스트를 작성했을 때 자동적으로 빌드와 배포가 진행되는 것을 Github 저장소 페이지의 Actions 탭에서 확인할 수 있다.\n\n# 마무리\n  아무래도 기존 서비스나 기능을 이용한 것이 대부분이었기 때문에, 그리고 블로그에 추가한 기능이 워낙에 적기 때문에 무엇을 설명해야 좋을지 잘 모르겠는 부분이 많다.\n아마 이걸 읽는 것만으로는 설명이 부족하리라 생각된다.\n\n  다소 무책임하다고는 생각하지만, 조금이나마 참고가 되기를 바라며 이 블로그의 Github 저장소 링크를 공유한다.\n[저장소 링크](https:\u002F\u002Fgithub.com\u002Fgze1206\u002Fgze1206.github.io)\n\n\u003E 이후에 댓글 기능을 추가할 예정입니다만, 혹시 질문이 있으실 경우 댓글 기능이 추가될 때까지는 [메일](mailto:\u002F\u002Fgze1206@naver.com)을 통해 전달해주시면 감사하겠습니다."}}}],fetch:{},mutations:void 0}}("Link","2021-04-24T07:45:50.474Z")));